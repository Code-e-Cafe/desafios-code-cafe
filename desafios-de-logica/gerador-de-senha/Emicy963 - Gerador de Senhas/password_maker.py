import random
from datetime import datetime

def gerar_senhas(caracteres: dict, comprimento: int, criterios: list) -> str:
    # Verificando se foi selecionado algum crit√©rio
    if not criterios:
        return "Selecione ao menos um crit√©rio."
    
    # Verificando se o comprimento √© suficiente para os crit√©rios
    if comprimento < len(criterios):
        return f"Comprimento muito pequeno para {len(criterios)} crit√©rios."
    
    # Montando o conjunto de caracteres v√°lidos
    caracteres_possiveis = ""
    for criterio in criterios:
        caracteres_possiveis += caracteres[criterio]
    
    # Garantir ao menos um caractere de cada crit√©rio selecionado
    senha = [random.choice(caracteres[criterio]) for criterio in criterios]
    
    # Adicionar mais caracteres de forma aleat√≥ria
    senha += [random.choice(caracteres_possiveis) for _ in range(comprimento - len(senha))]
    
    # Embaralhando a senha para ser mais aleat√≥ria
    random.shuffle(senha)
    
    # Retornando a senha como string
    return "".join(senha)

def salvar_senha(senhas: list, nome_do_arquivo="minhas_senhas.txt") -> None:
    try:
        # Criando cabe√ßalho com data/hora
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        
        with open(nome_do_arquivo, 'a', encoding='utf-8') as arquivo:
            arquivo.write(f"\n--- Senhas geradas em {timestamp} ---\n")
            for i, senha in enumerate(senhas, 1):
                arquivo.write(f"{i}. {senha}\n")
            arquivo.write("-" * 40 + "\n")
        
        print(f"‚úì {len(senhas)} senha(s) salva(s) em '{nome_do_arquivo}'!")
        
    except Exception as e:
        print(f"Erro ao salvar arquivo: {e}")

def obter_criterios() -> list:
    """Coleta os crit√©rios do usu√°rio de forma mais limpa"""
    print("\nSelecione os crit√©rios:")
    criterios = []
    
    opcoes = [
        ("mai√∫sculas", "Incluir letras mai√∫sculas (A-Z)"),
        ("min√∫sculas", "Incluir letras min√∫sculas (a-z)"),
        ("n√∫meros", "Incluir n√∫meros (0-9)"),
        ("especiais", "Incluir caracteres especiais (!@#$)")
    ]
    
    for criterio, descricao in opcoes:
        resposta = input(f"{descricao}? (s/n): ").lower().strip()
        if resposta == 's':
            criterios.append(criterio)
    
    return criterios

def main():
    print("=" * 35)
    print("    üîê GERADOR DE SENHAS PRO üîê")
    print("=" * 35)
    
    caracteres = {
        "mai√∫sculas": "ABCDEFGHIJKLMNOPQRSTUVWXYZ",
        "min√∫sculas": "abcdefghijklmnopqrstuvwxyz",
        "n√∫meros": "0123456789",
        "especiais": "!@#$%^&*()_+-=[]{}|;:,.<>?"
    }
    
    # Obter comprimento da senha
    while True:
        try:
            comprimento = int(input("\nInforme o comprimento da senha (m√≠nimo 4): "))
            
            if comprimento < 4:
                print("‚ö†Ô∏è  O comprimento deve ser no m√≠nimo 4. Tente novamente!")
            else:
                break
                
        except ValueError:
            print("‚ö†Ô∏è  Por favor, insira um n√∫mero v√°lido!")
    
    # Obter crit√©rios
    criterios = obter_criterios()
    
    if not criterios:
        print("‚ö†Ô∏è  Voc√™ deve selecionar pelo menos um crit√©rio!")
        return
    
    # Obter quantidade de senhas
    while True:
        try:
            quantidade = int(input("\nQuantas senhas deseja gerar? "))
            
            if quantidade <= 0:
                print("‚ö†Ô∏è  A quantidade deve ser maior que 0.")
            elif quantidade > 50:
                print("‚ö†Ô∏è  M√°ximo de 50 senhas por vez.")
            else:
                break
        except ValueError:
            print("‚ö†Ô∏è  Por favor, insira um n√∫mero v√°lido!")
    
    # Gerar senhas
    print(f"\nüîÑ Gerando {quantidade} senha(s)...\n")
    senhas = []
    
    for _ in range(quantidade):
        senha = gerar_senhas(caracteres, comprimento, criterios)
        if "Selecione" not in senha and "Comprimento" not in senha:
            senhas.append(senha)
        else:
            print(f"‚ö†Ô∏è  {senha}")
            return
    
    # Exibir senhas geradas
    print("‚úÖ Senhas geradas:")
    print("-" * 30)
    for i, senha in enumerate(senhas, 1):
        print(f"{i:2d}. {senha}")
    print("-" * 30)
    
    # Op√ß√£o para salvar
    if input("\nüíæ Deseja salvar as senhas em arquivo? (s/n): ").strip().lower() == "s":
        salvar_senha(senhas)
    
    print("\nüëã Obrigado por usar o Gerador de Senhas Pro!")

if __name__ == "__main__":
    main()